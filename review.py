# -*- coding: utf-8 -*-
"""review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ZJ3i1A5WMzplXNYCmSEex9pltva2BGU
"""

x = "Hello World"
print(len(x))

txt = "Hello World"
x = txt[2:5]
print(x)

txt = " Hello World "
x = txt.strip()
print(x)

txt = "Hello World"
txt = txt.upper()
print(x)

age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

if 5 == 10 or 4 == 4:
  print()

fruits = ["apple", "banana", "cherry"]
fruits.insert(1,"lemon")
print(fruits)

fruits = ["apple", "banana", "cherry"]
fruits.remove("banana")
print(fruits)

fruits = ["apple", "banana", "cherry"]
print(fruits[-1])

fruits = ["apple", "banana", "cherry"]
print(len(fruits))

fruits = {"apple", "banana", "cherry"}
fruits.discard("banana")
print(fruits)

car =	{"brand": "Ford","model": "Mustang","year": 1964} #Change the "year" value from 1964 to 2020.
car["year"] = 2020
print(car)

car =	{"brand": "Ford","model": "Mustang","year": 1964}   #Add the key/value pair "color" : "red" to the car dictionary.
car["color"] = "red"
print(car)

car =	{"brand": "Ford","model": "Mustang","year": 1964} #Use the pop method to remove "model" from the car dictionary.
car.pop("model")

a = 50  #Print "Hello World" if a is greater than b.
b = 10
if a>b:
 print("Hello World")

a = 50  #Print "Hello World" if a is not equal to b.
b = 10
if  a!=b:
  print("Hello World")

a = 50   #Print "Yes" if a is equal to b, otherwise print "No".
b = 10

if a == b:
    print("Yes")
else:
    print("No")

a = 50   #Print "1" if a is equal to b, print "2" if a is greater than b, otherwise print "3".
b = 10
if a == b:
    print("1")
elif a>b:
    print("2")
else:
    print("3")

a = 5   #Print "Hello" if a is equal to b, and c is equal to d.
b = 2+3
c = 1+4
d = 6-1
if a == b and c == d:
  print("Hello")

a = 5    #Print"Hello" if a is equal to b, or if c is equal to d.
b = 2+3
c = 1+4
d = 6-1
if a == b or c == d:
    print("Hello")

if 5 > 2:
    print("YES")    #نکته: تورفتگی را به خاطر بسپارید. #Complete the code block, print "YES" if 5 is larger than 2.
#Hint: remember the indentation.

a = 2    #Use the correct one line short hand syntax to print "YES" if a is equal to b, otherwise print("NO").
b = 5
print("YES") if a == b else print("NO")     # این روش از عملگر سه‌گانه استفاده می‌کند که یک روش کوتاه برای نوشتن عبارت شرط استif-else

a = 2   ##Use an if statement to print "YES" if either a or b is equal to c.
b = 50
c = 2
if a == c or b == c:
 print("YES")

i = 1   #چاپ i تا زمانی که i کمتر از 6 باشد.
while i < 6:
 print(i)
i += 1

i = 1      #برای حل این مشکل، باید مقدار i را در داخل بلوک print افزایش دهید
while i < 6:
    print(f"عدد فعلی: {i}")
    i += 1

i = 1  #Stop the loop if i is 3.
while i < 6:
    if i == 3:
        break  # Exit the loop immediately when i is 3
    print(i)
    i += 1    # به معنی "افزایش 1 به i" است.

i = 0    #In the loop, when i is 3, jump directly to the next iteration.
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

i = 1   #Print a message once the condition is false.هنگامی که شرط نادرست است، پیامی را چاپ کنید.
while i < 6:
  print(i)
  i += 1
else:

  print()  #i is no longer less than 6

fruits = ["apple", "banana", "cherry"] #Loop through the items in the fruits list.

for x in fruits:
 print(x)

fruits = ["apple", "banana", "cherry"]  #In the loop, when the item value is "banana", jump directly to the next item.
for x in fruits:
  if x == "banana":
    continue
  print(x)

for x in range(6):     #Use the range function to loop through a code set 6 times.
  print(x)

fruits = ["apple", "banana", "cherry"]   #Exit the loop when x is "banana".
for x in fruits:
  if x == "banana":
    break
  print(x)

def my_function():    #Create a function named my_function.
  print("Hello from a function")
my_function()   #باید فراخوانیش کنی تا مقدار تابع رو نشون بده

def my_function(fname, lname):   #Inside a function with two parameters, print the first parameter.
  print(fname)
my_function("fname", "lname")

def my_function(x):   #Let the function return the x parameter + 5.
   return x+5
my_function(3)

def my_function(*numbers):   #تابع مای فانکشن تمام اعداد ارسال شده به عنوان آرگومان را جمع می‌کند و مجموع آنها را چاپ می‌کند.
  print("The sum of all numbers is", sum(numbers))   #توجه کنید که به جای سام میتونه ماکسیمم یا مینیمم هم باشه
my_function(1, 2, 3, 4, 5)

def my_function(*kids):   #If you do not know the number of arguments that will be passed into your function, there is a prefix you can add in the function definition, which prefix?
  print("The youngest child is " + kids[2])   #در داخل تابع، به عنصر سوم تاپل کیدس  و با اندیس ۲ دسترسی پیدا میکنیم و آن را چاپ میکنیم
my_function('ali', 'maryam', 'maral', 'mahak', 'mahan')

def my_function(**kid):   #If you do not know the number of keyword arguments that will be passed into your function, there is a prefix you can add in the function definition, which prefix?
  print("His last name is " + kid["lname"])
my_function(lname="Doe")

def my_function(*args):   #این دوتا کد که دارم تعریف میکنم لپ کلام ۳ تا کد بالایی هست و فرق بین اونها چیه رو کاملا با این دوتا میشه فهمید
    print("Positional arguments:", args)

my_function(1, 2, 3, 4, 5)

def my_function(**kwargs):
    print("Keyword arguments:", kwargs)
my_function(name="Alice", age=30, city="New York")

x = lambda a:a   #Create a lambda function that takes one parameter (a) and returns it.توابع لامبدا برای وظایف ساده و کوتاه مناسب هستند. برای وظایف پیچیده‌تر، بهتر است از توابع معمولی استفاده کنید.
#با یک تابع لامبدا در یک خط می‌توان کارهای بی‌شماره‌ای انجام داد، به تعداد وظایف ساده‌ای که می‌توان با یک عبارت ریاضی یا منطقی بیان کرد.
# مقدار 5 را به تابع می‌دهیم
result = x(5)
# خروجی 5 خواهد بود
print(result)

double = lambda x: x * 2   #فرض کنید می‌خواهیم تابعی بنویسیم که عدد ورودی را دو برابر کند
result = double(5)
print(result)  # Output: 10

def is_even(x):                          #روش سنتی
    """Checks if a number is even."""      #فرض کنید می‌خواهیم فهرستی از اعداد را داشته باشیم و فقط اعداد زوج را از آن استخراج کنیم.
    return x % 2 == 0

# Assuming `numbers` is a list of integers
numbers = [2, 4, 6, 8]

even_numbers = [x for x in numbers if is_even(x)]  # List comprehension for filtering

print(even_numbers)  # Output: [2, 4, 6, 8]

even_numbers = list(filter(lambda x: x % 2 == 0, numbers))    #با استفاده از تابع لامبدا

print(even_numbers)  # Output: [2, 4, 6, 8]     #در این مثال، از تابع فیلتر به همراه یک تابع لامبدا برای فیلتر کردن اعداد زوج استفاده شده است.

names = ["ali", "mohammad", "reza", "maryam", "mina", "sara"]  #مثال‌های دیگر:فهرستی از اسامی را به حروف بزرگ تبدیل کنید
upper_names = list(map(lambda name: name.upper(), names))
print(upper_names)

numbers = [2, 4, 22, 44, 66, 77]     #اعداد یک لیست را دو برابر کنید
doubled_numbers = list(map(lambda x: x * 2, numbers))
print(doubled_numbers)

numbers = [2, 4, 22, 44, 66, 77]    #فقط اعداد بزرگتر از 10 را از لیست استخراج کنید:
filtered_numbers = list(filter(lambda x: x > 10, numbers))
print(filtered_numbers)

numbers = [2, 4, 22, 44, 66, 77]    #متوسط اعداد یک لیست را محاسبه کنید:
average = sum(numbers) / len(numbers)
print(average)

class   MyClass: x = 5                           #Create a class named MyClass:
  # ایجاد یک شیء از کلاس MyClass
my_object = MyClass()
# بررسی مقدار ویژگی x
print(my_object.x)  # Output: 5

class Student:   #1. ساختار کلاس:
  # نام دانش آموز
  name = ""
  # سن دانش آموز
  age = 0

  # تابع برای چاپ اطلاعات دانش آموز#2. سادگی و خوانایی
  def print_info(self):    #قرار دادن کد مربوط به ایجاد اشیاء و ذخیره سازی داده ها قبل از تعریف تابع پرینت اینفو، کد را ساده تر و خواناتر می کند.
    print(f"نام: {self.name}")     #3. وابستگی:
    print(f"سن: {self.age}")   #تابع پرینتـاینفو به ویژگی های کلاس استیودنت وابسته است.بنابراین، اگر کد مربوط به ایجاد اشیاء و ذخیره سازی داده ها بعد از تعریف تابع پرینت ـ اینفو قرار داده شود
# ایجاد اشیاء برای دانش آموزان
kaveh = Student()
kaveh.name = "کاوه"
kaveh.age = 12
kaveh.print_info()

mohammad = Student()
mohammad.name = "محمد"
mohammad.age = 16
mohammad.print_info()

hossein = Student()
hossein.name = "حسین"
hossein.age = 12
hossein.print_info()

milad = Student()
milad.name = "میلاد"
milad.age = 11
milad.print_info()

class MyClass:  #Use the p1 object to print the value of x
  x = 5
p1 = MyClass()
print(p1.x)

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
#The __init__ method is automatically called whenever a new object of the class is created.
#It's used to set the initial state of the object's attributes.
#The self argument allows you to access and modify the object's attributes within the method.
#You can create objects with different attribute values by passing different arguments to the constructor.
# Create an object of the Person class
person1 = Person("Alice", 30)

print(person1.name)  # Output: Alice
print(person1.age)   # Output: 30



class Person:  #اول بیا توابع رو تعریف کن و بعد بیا اسم عدد واقی رو به ترتیب تعاریف قبلی بنویس.
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name}.")

    def describe(self):
        print(f"Name: {self.name}, Age: {self.age}")

class Student(Person):
    def __init__(self, name, age, school, major):
        super().__init__(name, age)
        self.school = school
        self.major = major

    def introduce(self):
        print(f"Hi! I'm {self.name}, a {self.major} student at {self.school}.")

    def study(self, subject):
        print(f"I'm studying {subject} for my {self.major} major.")

# Create and use objects
student1 = Student("Alice", 20, "MIT", "Computer Science")
student2 = Student("Bob", 22, "Stanford", "Engineering")

student1.introduce()  # Output: Hi! I'm Alice, a Computer Science student at MIT.
student2.introduce()  # Output: Hi! I'm Bob, an Engineering student at Stanford.
student1.study("Algorithms")  # Output: I'm studying Algorithms for my Computer Science major.

student1.greet()  # Output: Hello, my name is Alice. (Inherited from Person)
student1.describe()  # Output: Name: Alice, Age: 20 (Inherited from Person)

class Person:    #What is the correct syntax to execute the printname method of the object x?
  def __init__(self, fname):
    self.firstname = fname

  def printname(self):
    print(self.firstname)

class Student(Person):
  pass

x = Student("Mike")
x.printname()

class Person:   #یک مثال دیگر
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname, school):
    super().__init__(fname, lname)
    self.school = school

  def introduce(self):
    print(f"Hi, my name is {self.firstname} {self.lastname}, and I study at {self.school}.")

# Create and use objects
person1 = Person("علی", "احمدی")
student1 = Student("مریم", "رضایی", "دانشگاه صنعتی شریف")

person1.printname()  # Output: علی احمدی
student1.introduce()  # Output: Hi, my name is مریم رضایی, and I study at دانشگاه صنعتی شریف.